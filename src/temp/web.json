[{"pageContent":"New! Paperspace joins DigitalOcean to expand AI capabilities. Learn more ->We're hiringBlogDocsGet SupportContact SalesProductsFeatured ProductsDropletsScalable virtual machinesKubernetesManaged Kubernetes clustersCloudwaysManaged cloud hostingApp PlatformGet apps to market fasterDatabasesWorry-free setup & maintenanceSpacesSimple object storageComputeDropletsKubernetesFunctionsCloud Website HostingCloudwaysApp PlatformStorageSpaces Object StorageVolumes Block StorageNetworkingVirtual Private Cloud (VPC)Cloud FirewallsLoad BalancersDNSManaged DatabasesMongoDBMySQLPostgreSQLRedis™Developer ToolsAPICLISupport PlansMonitoringUptimeSnapShooterSee all productsSolutionsCloudwaysManaged WordPressMake your website faster and more secure.Managed WoocommerceHassle-free ecommerce website hosting.Managed MagentoSimple, efficient ecommerce hosting.By industryData AnalyticsDigital Marketing AgenciesEcommerceAdvertising and Marketing TechIT ConsultingDeveloper ToolsCI/CD PipelinesView All IndustriesBy use caseCloud VPNWeb & Mobile AppsGame DevelopmentVideo StreamingVirtual MachinesBlockchainWebsite HostingVPS HostingView All Use CasesQuestions?Speak With an ExpertSee all solutionsDevelopersOur communityDeveloper CenterLearn, build, and scale.Community HomeDevOps and development guides.CSS-TricksAll things web design.ResourcesTutorialsQuestions And AnswersMarketplaceToolsWrite for DOnationsCustomer StoriesDigitalOcean BlogGet InvolvedHatch Startup ProgramOpen Source SponsorshipsHacktoberfestDO ImpactDocumentationQuick StartDropletsStorageApp PlatformAPI ReferenceDomains and DNSBusinessesGrow your businessThe WaveContent to level up your business.PartnersWork with a partner to get up and running in the cloud, or become a partner.Find a partnerBecome a partnerUGURUSElite training for agencies & freelancers.ResourcesCustomer StoriesHatch Startup ProgramPrice Estimate CalculatorOne-Click AppsSecurityQuestions?Contact salesPricingLog inLog in to:CommunityDigitalOceanSign upSign up for:CommunityDigitalOceanWe're hiringBlogDocsGet SupportSalesTutorialsQuestionsLearning PathsFor BusinessesProduct DocsSocial ImpactSearch CommunityCONTENTSPrerequisitesStep 1 — Getting StartedStep 2 — Installing Multiple Node.js VersionsStep 3 — Listing Installed Node.js VersionsStep 4 — Setting a Default Node.js VersionStep 5 — Switching Between Node.js VersionsStep 6 — Removing Node.js VersionsStep 7 — Unloading Node Version ManagerConclusion// Tutorial //How To Run Multiple Versions of Node.js with Node Version ManagerPublished on July 27, 2019 · Updated on December 17, 2020Node.jsBy joshtronicIntroduction\nIf you work on multiple Node.js projects, you’ve probably run into this one time or another. You have the latest and greatest version of Node.js installed, and the project you’re about to work on requires an older version. In those situations, the Node Version Manager (nvm) is a great tool to use, allowing you to install multiple versions of Node.js and switch between them as you see fit.\nIn this tutorial, you will install nvm and learn to install, remove, and switch between different versions of Node.js.\nPrerequisites\nTo complete this tutorial, you will need the following:\n\nThe latest version of Node installed on your machine. To install Node on macOS, follow the steps outlined in this How to Install Node.js and Create a Local Development Environment on macOS tutorial.\n\nStep 1 — Getting Started\nTo get started, you will need to install the Node Version Manager, or nvm, on your system. You can install it manually by running the following command:\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n\n\nIf you prefer wget, you can run this command:\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n\n\nOnce installed, close your terminal application for changes to take effect. You will also need to add a couple of lines to your bash shell startup file. This file might have the name .bashrc, .bash_profile, or .zshrc depending on your operating system. To do this, reopen your terminal app and run the following commands:\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"\n\n\nWith nvm installed, you can now install and work with multiple versions of Node.js.\nStep 2 — Installing Multiple Node.js Versions\nNow that you have nvm installed, you can install a few different versions of Node.js:\nnvm install 0.10\n\n\nAfter running this command, this is the output that will display in your terminal app:\nOutputDownloading and installing node v0.10.48...\nDownloading https://nodejs.org/dist/v0.10.48/node-v0.10.48-darwin-x64.tar.xz...\n######################################################################### 100.0%\nComputing checksum with shasum -a 256\nChecksums matched!\nNow using node v0.10.48 (npm v2.15.1)\n\nYou can also install Node version 8 and version 12:\nnvm install 8\nnvm install 12\n\n\nUpon running each command, nvm will download the version of Node.js from the official website and install it. Once installed, it will also set the version you just installed as the active version.\nIf you were to run node --version after each of the aforementioned commands, you’d see the most recent version of the respective major version.\nnvm isn’t limited to major versions either. You could also run nvm install 12.0.0 to explicitly install the specific 12.0.0 version of Node.js.\nStep 3 — Listing Installed Node.js Versions\nWith a handful of different versions of Node.js installed, we can run nvm with the ls argument to list out everything we have installed:\nnvm ls\n\n\nThe output produced by running this command might look something like this:\nOutput    v0.10.48\n        v4.9.1\n    v6.10.3\n    v6.14.4\n        v8.4.0\n    v8.10.0\n    v10.13.0\n    v10.15.0\n    v10.15.3\n    ->      v12.0.0\n    v12.7.0\n        system\ndefault -> v10.15 (-> v10.15.3)\nnode -> stable (-> v12.7.0) (default)\nstable -> 12.7 (-> v12.7.0) (default)\niojs -> N/A (default)\nunstable -> N/A (default)\nlts/* -> lts/dubnium (-> N/A)\nlts/argon -> v4.9.1\nlts/boron -> v6.17.1 (-> N/A)\nlts/carbon -> v8.16.0 (-> N/A)\nlts/dubnium -> v10.16.0 (-> N/A)\n\nYour output will probably differ depending on how many versions of Node.js you have installed on your machine.\nThe little -> indicates the active version, and default -> indicates the default version of Node.js. The default version of Node is the version that will be available when you open a new shell. system corresponds with the version of Node.js installed outside of nvm on your system.\nYou may want to change the version of Node.js that your machine defaults to. You can also use nvm to accomplish this.\nStep 4 — Setting a Default Node.js Version\nEven with juggling multiple versions, there’s a good chance you have one version that you would prefer to run the majority of the time. Often times, that would be the latest stable version of Node.js. During the time of the release of this tutorial, the latest stable version of Node.js is version 15.1.0.\nTo set the latest stable version as your default, run:\nnvm alias default stable\n\n\nAfter running this command, this will be the output you see:\nOutputdefault -> stable (-> v15.1.0)\n\nYou may also have a specific version number you would like to set as your default. To alias default to a specific version, run:\nnvm alias default 10.15\n\n\nOutputdefault -> 10.15 (-> v10.15.3)\n\nNow every time you open a new shell, that version of Node.js will be immediately available. Some work you do may require different versions of Node.js. This is something nvm can help you with as well.\nStep 5 — Switching Between Node.js Versions\nTo switch to a different version of Node.js, use the nvm command use followed by the version of Node.js you would like to use:\nnvm use 0.10\n\n\nThis is the output you will see:\nOutputNow using node v0.10.48 (npm v2.15.1)\n\nYou can even switch back to your default version:\nnvm use default\n\n\nAt this point, you have installed several versions of Node.js. You can use nvm to uninstall any unwanted version of Node.js you may have.\nStep 6 — Removing Node.js Versions\nYou may have several versions of Node.js installed due to working on a variety of projects on your machine.\nFortunately, you can remove Node.js versions just as easily as you installed them:\nnvm uninstall 0.10\n\n\nThis is the output that will display after running this command:\nOutputUninstalled node v0.10.48\n\nUnfortunately, when you specify a major or minor version, nvm will only uninstall the latest installed version that matches the version number.\nSo, if you have two different versions of Node.js version 6 installed, you have to run the uninstall command for each version:\nOutput$ nvm uninstall 6\nUninstalled node v6.14.4\n\n$ nvm uninstall 6\nUninstalled node v6.10.3\n\nIt’s worth noting that you can’t remove a version of Node.js that is currently in use and active.\nYou may want to return to your system’s default settings and stop using nvm. The next step will explain how to do this.\nStep 7 — Unloading Node Version Manager\nIf you would like to completely remove nvm from your machine, you can use the unload command:\nnvm unload\n\n\nIf you would still like to keep nvm on your machine, but you want to return to your system’s installed version of Node.js, you can make the switch by running this command:\nnvm use system\n\n\nNow your machine will return to the installed version of Node.js.\nConclusion\nWorking on multiple projects that use different versions of Node.js doesn’t have to be a nightmare. Node Version Manager makes the process seamless. If you would like to avoid having to remember to switch versions, you can take things a step further by creating a .nvmrc file in your project’s root:\n$ echo \"12\" > .nvmrc\n\n\nAs a next step, you can learn to create your very own Node.js program with this How To Write and Run Your First Program in Node.js tutorial.\nThanks for learning with the DigitalOcean Community. Check out our offerings for compute, storage, networking, and managed databases.\nLearn more about us\nAbout the authorsjoshtronicauthorCeora FordeditorStill looking for an answer?Ask a questionSearch for more helpWas this helpful?YesNo CommentsLeave a comment﻿This textbox defaults to using Markdown to format your answer.You can type !ref in this text area to quickly search our full set of tutorials, documentation & marketplace offerings and insert the link!Sign In or Sign Up to CommentThis work is licensed under a Creative Commons Attribution-NonCommercial- ShareAlike 4.0 International License.Try DigitalOcean for freeClick below to sign up and get $200 of credit to try our products over 60 days!Sign upPopular TopicsUbuntuLinux BasicsJavaScriptPythonMySQLDockerKubernetesAll tutorialsFree Managed HostingJoin the Tech TalkSuccess! Thank you! Please check your email for further details.Please complete your information!Get our biweekly newsletterSign up for Infrastructure as a Newsletter.\nSign upHollie's Hub for GoodWorking on improving health and education, reducing inequality, and spurring economic growth? We’d like to help.\nLearn moreBecome a contributorYou get paid; we donate to tech nonprofits.\nLearn moreFeatured on CommunityKubernetes CourseLearn Python 3Machine Learning in PythonGetting started with GoIntro to KubernetesDigitalOcean ProductsCloudwaysVirtual MachinesManaged DatabasesManaged KubernetesBlock StorageObject StorageMarketplaceVPCLoad BalancersWelcome to the developer cloudDigitalOcean makes it simple to launch in the cloud and scale up as you grow – whether you’re running one virtual machine or ten thousand.Learn more ->Get started for freeEnter your email to get $200 in credit for your first 60 days with DigitalOcean.Send My PromoNew accounts only. By submitting your email you agree to our Privacy Policy.CompanyAboutLeadershipBlogCareersCustomersPartnersChannel PartnersReferral ProgramAffiliate ProgramPressLegalSecurityInvestor RelationsDO ImpactProductsProducts OverviewDropletsKubernetesApp PlatformFunctionsCloudwaysManaged DatabasesSpacesMarketplaceLoad BalancersBlock StorageTools & IntegrationsAPIPricingDocumentationRelease NotesUptimeCommunityTutorialsQ&ACSS-TricksWrite for DOnationsCurrents ResearchHatch Startup Programdeploy by DigitalOceanShop SwagResearch ProgramOpen SourceCode of ConductNewsletter SignupMeetupsSolutionsWebsite HostingVPS HostingWeb & Mobile AppsGame DevelopmentStreamingVPNSaaS PlatformsCloud Hosting for BlockchainStartup ResourcesContactSupportSalesReport AbuseSystem StatusShare your ideasCompanyAboutLeadershipBlogCareersCustomersPartnersChannel PartnersReferral ProgramAffiliate ProgramPressLegalSecurityInvestor RelationsDO ImpactProductsProducts OverviewDropletsKubernetesApp PlatformFunctionsCloudwaysManaged DatabasesSpacesMarketplaceLoad BalancersBlock StorageTools & IntegrationsAPIPricingDocumentationRelease NotesUptimeCommunityTutorialsQ&ACSS-TricksWrite for DOnationsCurrents ResearchHatch Startup Programdeploy by DigitalOceanShop SwagResearch ProgramOpen SourceCode of ConductNewsletter SignupMeetupsSolutionsWebsite HostingVPS HostingWeb & Mobile AppsGame DevelopmentStreamingVPNSaaS PlatformsCloud Hosting for BlockchainStartup ResourcesContactSupportSalesReport AbuseSystem StatusShare your ideas© 2023 DigitalOcean, LLC.{\"props\":{\"pageProps\":{\"data\":{\"slug\":\"nodejs-node-version-manager\",\"tutorial\":{\"id\":4939,\"original_id\":null,\"slug\":\"nodejs-node-version-manager\",\"tutorial_type\":\"tutorial\",\"title\":\"How To Run Multiple Versions of Node.js with Node Version Manager\",\"description\":\"The Node Version Manager is a great tool to use, allowing you to install multiple versions of Node.js and switch between them as you see fit. In this tutorial, you will install `nvm` and learn to install, remove, and switch between different versions of Node.js.\",\"content\":\"### Introduction\\r\\n\\r\\nIf you work on multiple Node.js projects, you've probably run into this one time or another. You have the latest and greatest version of Node.js installed, and the project you're about to work on requires an older version. In those situations, the [Node Version Manager](https://github.com/nvm-sh/nvm) (nvm) is a great tool to use, allowing you to install multiple versions of Node.js and switch between them as you see fit.\\r\\n\\r\\nIn this tutorial, you will install `nvm` and learn to install, remove, and switch between different versions of Node.js.\\r\\n\\r\\n## Prerequisites\\r\\n\\r\\nTo complete this tutorial, you will need the following:\\r\\n\\r\\n- The latest version of Node installed on your machine. To install Node on macOS, follow the steps outlined in this [How to Install Node.js and Create a Local Development Environment on macOS](https://www.digitalocean.com/community/tutorials/how-to-install-node-js-and-create-a-local-development-environment-on-macos) tutorial.\\r\\n\\r\\n## Step 1 — Getting Started\\r\\n\\r\\nTo get started, you will need to install the Node Version Manager, or `nvm`, on your system. You can install it manually by running the following command:\\r\\n\\r\\n```command\\r\\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\\r\\n```\\r\\n\\r\\nIf you prefer `wget`, you can run this command:\\r\\n\\r\\n```command\\r\\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\\r\\n```\\r\\n\\r\\nOnce installed, close your terminal application for changes to take effect. You will also need to add a couple of lines to your bash shell startup file. This file might have the name `.bashrc`, `.bash_profile`, or `.zshrc` depending on your operating system. To do this, reopen your terminal app and run the following commands:\\r\\n\\r\\n```command\\r\\nexport NVM_DIR=\\\"$HOME/.nvm\\\"\\r\\n[ -s \\\"$NVM_DIR/nvm.sh\\\" ] \\u0026\\u0026 \\\\. \\\"$NVM_DIR/nvm.sh\\\"\\r\\n[ -s \\\"$NVM_DIR/bash_completion\\\" ] \\u0026\\u0026 \\\\. \\\"$NVM_DIR/bash_completion\\\"\\r\\n```\\r\\n\\r\\nWith `nvm` installed, you can now install and work with multiple versions of Node.js.\\r\\n\\r\\n## Step 2 — Installing Multiple Node.js Versions\\r\\n\\r\\nNow that you have `nvm` installed, you can install a few different versions of Node.js:\\r\\n\\r\\n```command\\r\\nnvm install 0.10\\r\\n```\\r\\n\\r\\nAfter running this command, this is the output that will display in your terminal app:\\r\\n\\r\\n```\\r\\n[secondary_label Output]\\r\\nDownloading and installing node v0.10.48...\\r\\nDownloading https://nodejs.org/dist/v0.10.48/node-v0.10.48-darwin-x64.tar.xz...\\r\\n######################################################################### 100.0%\\r\\nComputing checksum with shasum -a 256\\r\\nChecksums matched!\\r\\nNow using node v0.10.48 (npm v2.15.1)\\r\\n```\\r\\n\\r\\nYou can also install Node version 8 and version 12:\\r\\n\\r\\n```command\\r\\nnvm install 8\\r\\nnvm install 12\\r\\n```\\r\\n\\r\\nUpon running each command, `nvm` will download the version of Node.js from the official website and install it. Once installed, it will also set the version you just installed as the active version.\\r\\n\\r\\nIf you were to run `node --version` after each of the aforementioned commands, you'd see the most recent version of the respective major version.\\r\\n\\r\\n`nvm` isn't limited to major versions either. You could also run `nvm install 12.0.0` to explicitly install the specific 12.0.0 version of Node.js.\\r\\n\\r\\n## Step 3 — Listing Installed Node.js Versions\\r\\n\\r\\nWith a handful of different versions of Node.js installed, we can run `nvm` with the `ls` argument to list out everything we have installed:\\r\\n\\r\\n```command\\r\\nnvm ls\\r\\n```\\r\\n\\r\\nThe output produced by running this command might look something like this:\\r\\n\\r\\n```\\r\\n[secondary_label Output]\\r\\n    v0.10.48\\r\\n        v4.9.1\\r\\n    v6.10.3\\r\\n    v6.14.4\\r\\n        v8.4.0\\r\\n    v8.10.0\\r\\n    v10.13.0\\r\\n    v10.15.0\\r\\n    v10.15.3\\r\\n    -\\u003e      v12.0.0\\r\\n    v12.7.0\\r\\n        system\\r\\ndefault -\\u003e v10.15 (-\\u003e v10.15.3)\\r\\nnode -\\u003e stable (-\\u003e v12.7.0) (default)\\r\\nstable -\\u003e 12.7 (-\\u003e v12.7.0) (default)\\r\\niojs -\\u003e N/A (default)\\r\\nunstable -\\u003e N/A (default)\\r\\nlts/* -\\u003e lts/dubnium (-\\u003e N/A)\\r\\nlts/argon -\\u003e v4.9.1\\r\\nlts/boron -\\u003e v6.17.1 (-\\u003e N/A)\\r\\nlts/carbon -\\u003e v8.16.0 (-\\u003e N/A)\\r\\nlts/dubnium -\\u003e v10.16.0 (-\\u003e N/A)\\r\\n```\\r\\n\\r\\nYour output will probably differ depending on how many versions of Node.js you have installed on your machine.\\r\\n\\r\\nThe little `-\\u003e` indicates the active version, and `default -\\u003e` indicates the default version of Node.js. The default version of Node is the version that will be available when you open a new shell. `system` corresponds with the version of Node.js installed outside of `nvm` on your system.\\r\\n\\r\\nYou may want to change the version of Node.js that your machine defaults to. You can also use `nvm` to accomplish this.\\r\\n\\r\\n## Step 4 — Setting a Default Node.js Version\\r\\n\\r\\nEven with juggling multiple versions, there's a good chance you have one version that you would prefer to run the majority of the time. Often times, that would be the latest stable version of Node.js. During the time of the release of this tutorial, the latest stable version of Node.js is version 15.1.0.\\r\\n\\r\\nTo set the latest stable version as your default, run:\\r\\n\\r\\n```command\\r\\nnvm alias default stable\\r\\n```\\r\\n\\r\\nAfter running this command, this will be the output you see:\\r\\n\\r\\n```\\r\\n[secondary_label Output]\\r\\ndefault -\\u003e stable (-\\u003e v15.1.0)\\r\\n```\\r\\n\\r\\nYou may also have a specific version number you would like to set as your default. To alias default to a specific version, run:\\r\\n\\r\\n```command\\r\\nnvm alias default 10.15\\r\\n```\\r\\n\\r\\n```\\r\\n[secondary_label Output]\\r\\ndefault -\\u003e 10.15 (-\\u003e v10.15.3)\\r\\n```\\r\\n\\r\\nNow every time you open a new shell, that version of Node.js will be immediately available. Some work you do may require different versions of Node.js. This is something `nvm` can help you with as well.\\r\\n\\r\\n## Step 5 — Switching Between Node.js Versions\\r\\n\\r\\nTo switch to a different version of Node.js, use the `nvm` command `use` followed by the version of Node.js you would like to use:\\r\\n\\r\\n```command\\r\\nnvm use 0.10\\r\\n```\\r\\n\\r\\nThis is the output you will see:\\r\\n\\r\\n```\\r\\n[secondary_label Output]\\r\\nNow using node v0.10.48 (npm v2.15.1)\\r\\n```\\r\\n\\r\\nYou can even switch back to your default version:\\r\\n\\r\\n```command\\r\\nnvm use default\\r\\n```\\r\\n\\r\\nAt this point, you have installed several versions of Node.js. You can use `nvm` to uninstall any unwanted version of Node.js you may have.\\r\\n\\r\\n## Step 6 — Removing Node.js Versions\\r\\n\\r\\nYou may have several versions of Node.js installed due to working on a variety of projects on your machine.\\r\\n\\r\\nFortunately, you can remove Node.js versions just as easily as you installed them:\\r\\n\\r\\n```command\\r\\nnvm uninstall 0.10\\r\\n```\\r\\n\\r\\nThis is the output that will display after running this command:\\r\\n\\r\\n```\\r\\n[secondary_label Output]\\r\\nUninstalled node v0.10.48\\r\\n```\\r\\n\\r\\nUnfortunately, when you specify a major or minor version, `nvm` will only `uninstall` the latest installed version that matches the version number.\\r\\n\\r\\nSo, if you have two different versions of Node.js version 6 installed, you have to run the `uninstall` command for each version:\\r\\n\\r\\n```\\r\\n[secondary_label Output]\\r\\n$ nvm uninstall 6\\r\\nUninstalled node v6.14.4\\r\\n\\r\\n$ nvm uninstall 6\\r\\nUninstalled node v6.10.3\\r\\n```\\r\\n\\r\\nIt's worth noting that you can't remove a version of Node.js that is currently in use and active.\\r\\n\\r\\nYou may want to return to your system's default settings and stop using nvm. The next step will explain how to do this.\\r\\n\\r\\n## Step 7 — Unloading Node Version Manager\\r\\n\\r\\nIf you would like to completely remove `nvm` from your machine, you can use the `unload` command:\\r\\n\\r\\n```command\\r\\nnvm unload\\r\\n```\\r\\n\\r\\nIf you would still like to keep `nvm` on your machine, but you want to return to your system's installed version of Node.js, you can make the switch by running this command:\\r\\n\\r\\n```command\\r\\nnvm use system\\r\\n```\\r\\n\\r\\nNow your machine will return to the installed version of Node.js.\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nWorking on multiple projects that use different versions of Node.js doesn't have to be a nightmare. Node Version Manager makes the process seamless. If you would like to avoid having to remember to switch versions, you can take things a step further by creating a `.nvmrc` file in your project's root:\\r\\n\\r\\n```command\\r\\n$ echo \\\"12\\\" \\u003e .nvmrc\\r\\n```\\r\\n\\r\\nAs a next step, you can learn to create your very own Node.js program with this [How To Write and Run Your First Program in Node.js](https://www.digitalocean.com/community/tutorials/how-to-write-and-run-your-first-program-in-node-js) tutorial.\",\"language\":\"en\",\"state\":\"published\",\"last_validated_at\":\"2020-12-17T17:45:39.745Z\",\"published_at\":\"2019-07-27T00:00:00.000Z\",\"views\":62354,\"follow_up_questions_enabled_at\":null,\"comments_locked_at\":null,\"raw_html_allowed_in_markdown_at\":null,\"event_start_at\":null,\"event_timezone\":\"Eastern Time (US \\u0026 Canada)\",\"featured_at\":null,\"header_url\":null,\"site\":\"community\",\"conclusion_cta\":null,\"right_side_nav_cta\":null,\"original\":{},\"authors\":[{\"user_name\":\"joshtronic\",\"relation\":\"author\",\"user_id\":null,\"tutorial_id\":4939,\"created_at\":\"2020-04-16T12:38:29.492Z\",\"updated_at\":\"2020-04-16T12:38:29.492Z\"}],\"editors\":[{\"user_name\":null,\"relation\":\"editor\",\"user_id\":1288603,\"tutorial_id\":4939,\"created_at\":\"2021-01-12T20:12:07.303Z\",\"updated_at\":\"2021-03-22T19:29:40.273Z\",\"user\":{\"id\":1288603,\"username\":\"ceoraf\",\"slug\":\"ceoraf\",\"first_name\":\"Ceora\",\"last_name\":\"Ford\",\"title\":\"\",\"bio\":\"\",\"website\":\"https://ceoraford.com/\",\"twitter_handle\":\"ceeoreo_\",\"github_handle\":\"ceoraford\",\"linkedin_url\":\"https://www.linkedin.com/in/ceora-ford/\",\"stackoverflow_url\":null,\"location\":null,\"skills\":\"\",\"has_seen_registration_at\":\"2022-08-30T17:06:14.808Z\",\"created_at\":\"2020-10-09T16:13:23.490Z\",\"updated_at\":\"2021-08-11T00:26:47.451Z\"}}],\"translators\":[],\"series\":[],\"needs_review\":false,\"tags\":[{\"id\":12,\"slug\":\"node-js\",\"name\":\"Node.js\",\"description\":\"Node.js is a fast, lightweight platform (built on Chrome's JavaScript runtime) used to quickly and easily create scalable network applications.\",\"created_at\":\"2022-01-31T18:04:44.879Z\",\"updated_at\":\"2022-01-29T10:07:14.106Z\",\"admin_use_only_at\":null,\"admin_view_only_at\":null,\"site\":[\"community\"],\"type\":\"tag\"}],\"teams\":[],\"origins\":[],\"categories\":[],\"subcategories\":[]},\"headers\":[{\"slug\":\"prerequisites\",\"content\":\"Prerequisites\",\"text\":\"Prerequisites\",\"rendered\":\"Prerequisites\",\"level\":2},{\"slug\":\"step-1-getting-started\",\"content\":\"Step 1 — Getting Started\",\"text\":\"Step 1 — Getting Started\",\"rendered\":\"Step 1 — Getting Started\",\"level\":2},{\"slug\":\"step-2-installing-multiple-node-js-versions\",\"content\":\"Step 2 — Installing Multiple Node.js Versions\",\"text\":\"Step 2 — Installing Multiple Node.js Versions\",\"rendered\":\"Step 2 — Installing Multiple Node.js Versions\",\"level\":2},{\"slug\":\"step-3-listing-installed-node-js-versions\",\"content\":\"Step 3 — Listing Installed Node.js Versions\",\"text\":\"Step 3 — Listing Installed Node.js Versions\",\"rendered\":\"Step 3 — Listing Installed Node.js Versions\",\"level\":2},{\"slug\":\"step-4-setting-a-default-node-js-version\",\"content\":\"Step 4 — Setting a Default Node.js Version\",\"text\":\"Step 4 — Setting a Default Node.js Version\",\"rendered\":\"Step 4 — Setting a Default Node.js Version\",\"level\":2},{\"slug\":\"step-5-switching-between-node-js-versions\",\"content\":\"Step 5 — Switching Between Node.js Versions\",\"text\":\"Step 5 — Switching Between Node.js Versions\",\"rendered\":\"Step 5 — Switching Between Node.js Versions\",\"level\":2},{\"slug\":\"step-6-removing-node-js-versions\",\"content\":\"Step 6 — Removing Node.js Versions\",\"text\":\"Step 6 — Removing Node.js Versions\",\"rendered\":\"Step 6 — Removing Node.js Versions\",\"level\":2},{\"slug\":\"step-7-unloading-node-version-manager\",\"content\":\"Step 7 — Unloading Node Version Manager\",\"text\":\"Step 7 — Unloading Node Version Manager\",\"rendered\":\"Step 7 — Unloading Node Version Manager\",\"level\":2},{\"slug\":\"conclusion\",\"content\":\"Conclusion\",\"text\":\"Conclusion\",\"rendered\":\"Conclusion\",\"level\":2}],\"comments\":[],\"commentsRequestParams\":[\"tutorial\",4939,{\"type\":\"comment\",\"page\":0,\"perPage\":10}],\"translations\":[{\"key\":\"en\",\"label\":\"English\",\"value\":\"nodejs-node-version-manager\"}],\"followUpQuestions\":[],\"questionsRequestParams\":{\"page\":0,\"perPage\":5},\"versions\":[]}},\"__N_SSG\":true},\"page\":\"/community/tutorials/[slug]\",\"query\":{\"slug\":\"nodejs-node-version-manager\"},\"buildId\":\"ed97ef61f2b0514a5276db7a29c972197ff2f762\",\"isFallback\":false,\"dynamicIds\":[99445,39527,63269],\"gsp\":true,\"scriptLoader\":[]}","metadata":{"source":"https://www.digitalocean.com/community/tutorials/nodejs-node-version-manager"}}]